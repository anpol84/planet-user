/**
 * NOTE: This class is auto generated by Kora OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.planet.user.api;

import ru.planet.user.model.ChangeUserRequest;
import ru.planet.user.model.CreateUser400Response;
import ru.planet.user.model.CreateUserRequest;
import ru.planet.user.model.CreateUserResponse;
import ru.planet.user.model.GetUser400Response;
import ru.planet.user.model.GetUserResponse;
import ru.planet.user.model.UserErrorResponse;

import java.util.List;
import java.util.Map;
import jakarta.annotation.Nullable;


@ru.tinkoff.kora.common.annotation.Generated("openapi generator kora server")
@ru.tinkoff.kora.http.server.common.annotation.HttpController
@ru.tinkoff.kora.common.Component
public class UserApiController {
    private final UserApiDelegate delegate;

    public UserApiController(UserApiDelegate delegate) {
      this.delegate = delegate;
    }

    /**
     * PUT /api/users/{userId} : change user info
     *
     * @param userId user id (required)
     * @param token Bearer token for authorization (required)
     * @param changeUserRequest  (required)
     * @return User changed (status code 200)
     *         or Validation error (status code 400)
     *         or Business logic error (status code 422)
     */
    @ru.tinkoff.kora.http.common.annotation.HttpRoute(method = "PUT", path = "/api/users/{userId}")
    @ru.tinkoff.kora.common.Mapping(UserApiServerResponseMappers.ChangeUserApiResponseMapper.class)
    public UserApiResponses.ChangeUserApiResponse changeUser(      
      @ru.tinkoff.kora.http.common.annotation.Path("userId")
      long userId,
      
      @ru.tinkoff.kora.http.common.annotation.Header("token")
      String token,
      
      @ru.tinkoff.kora.json.common.annotation.Json
      ChangeUserRequest changeUserRequest
    ) throws Exception {
      return this.delegate.changeUser(
        userId,token,changeUserRequest
      );
    }


    /**
     * POST /api/users : Create a new user
     *
     * @param createUserRequest  (required)
     * @return User created (status code 200)
     *         or Validation error (status code 400)
     *         or Business logic error (status code 422)
     */
    @ru.tinkoff.kora.http.common.annotation.HttpRoute(method = "POST", path = "/api/users")
    @ru.tinkoff.kora.common.Mapping(UserApiServerResponseMappers.CreateUserApiResponseMapper.class)
    public UserApiResponses.CreateUserApiResponse createUser(      
      @ru.tinkoff.kora.json.common.annotation.Json
      CreateUserRequest createUserRequest
    ) throws Exception {
      return this.delegate.createUser(
        createUserRequest
      );
    }


    /**
     * DELETE /api/users/{userId} : delete a user
     *
     * @param userId user id (required)
     * @param token Bearer token for authorization (required)
     * @return User deleted (status code 200)
     *         or Validation error (status code 400)
     *         or Business logic error (status code 422)
     */
    @ru.tinkoff.kora.http.common.annotation.HttpRoute(method = "DELETE", path = "/api/users/{userId}")
    @ru.tinkoff.kora.common.Mapping(UserApiServerResponseMappers.DeleteUserApiResponseMapper.class)
    public UserApiResponses.DeleteUserApiResponse deleteUser(      
      @ru.tinkoff.kora.http.common.annotation.Path("userId")
      long userId,
      
      @ru.tinkoff.kora.http.common.annotation.Header("token")
      String token
    ) throws Exception {
      return this.delegate.deleteUser(
        userId,token
      );
    }


    /**
     * GET /api/users/{userId} : get a user info
     *
     * @param userId user id (required)
     * @param token Bearer token for authorization (required)
     * @return User Info (status code 200)
     *         or Validation error (status code 400)
     *         or Business logic error (status code 422)
     */
    @ru.tinkoff.kora.http.common.annotation.HttpRoute(method = "GET", path = "/api/users/{userId}")
    @ru.tinkoff.kora.common.Mapping(UserApiServerResponseMappers.GetUserApiResponseMapper.class)
    public UserApiResponses.GetUserApiResponse getUser(      
      @ru.tinkoff.kora.http.common.annotation.Path("userId")
      long userId,
      
      @ru.tinkoff.kora.http.common.annotation.Header("token")
      String token
    ) throws Exception {
      return this.delegate.getUser(
        userId,token
      );
    }

}
