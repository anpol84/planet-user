import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    dependencies {
        classpath("ru.tinkoff.kora:openapi-generator:1.1.17")
    }
}



plugins {
    id "java"
    id "jacoco"
    id "application"

    id "org.openapi.generator" version "7.4.0"
}


applicationName = "application"
mainClassName = "ru.planet.Application"

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
    mavenCentral()
}

configurations {
    koraBom
    annotationProcessor.extendsFrom(koraBom)
    compileOnly.extendsFrom(koraBom)
    implementation.extendsFrom(koraBom)
    api.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:1.1.17")
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "javax.annotation:javax.annotation-api:1.3.2"
    implementation "ru.tinkoff.kora:http-server-undertow"
    implementation "ru.tinkoff.kora:logging-logback"
    implementation "ru.tinkoff.kora:config-hocon"
    implementation "ru.tinkoff.kora:openapi-management"
    implementation "ru.tinkoff.kora:json-module"
    implementation "ru.tinkoff.kora:validation-module"
    implementation "ru.tinkoff.kora:micrometer-module"
    implementation "ru.tinkoff.kora:resilient-kora"
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation "ru.tinkoff.kora:cache-caffeine"
    implementation "ru.tinkoff.kora:http-client-ok"
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    implementation "ru.tinkoff.kora:database-jdbc"
    annotationProcessor "org.projectlombok:lombok:1.18.36"
    compileOnly 'org.projectlombok:lombok:1.18.36'
    implementation 'org.mindrot:jbcrypt:0.4'

    implementation "org.postgresql:postgresql:42.7.4"

    testImplementation "ru.tinkoff.kora:test-junit5"
}


test.dependsOn tasks.distTar


application {
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

test {
    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    jacoco {
        excludes += ["**/Application*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

tasks.register("openApiGenerateHttpServer", GenerateTask) {
    generatorName = "kora"
    group = "openapi tools"
    inputSpec = "$projectDir/src/main/resources/openapi/planet-hotel.yaml"
    outputDir = "$projectDir/build/generated/openapi"
    apiPackage = "ru.planet.hotel.api"
    modelPackage = "ru.planet.hotel.model"
    invokerPackage = "ru.planet.hotel.invoker"
    configOptions = [
            mode                  : "java-server",
            enableServerValidation: "true"
    ]
}

def loadEnv() {
    def envFile = file('.env')
    def envMap = [:]
    if (envFile.exists()) {
        envFile.eachLine { line ->
            if (!line.startsWith('#') && line.contains('=')) {
                def (key, value) = line.split('=', 2)
                envMap[key.trim()] = value.trim()
            }
        }
    } else {
        println "Файл .env не найден"
    }
    return envMap
}

compileJava.dependsOn tasks.openApiGenerateHttpServer

sourceSets {
    main {
        java {
            srcDirs "build/generated/openapi"
        }
    }
}

distTar {
    archiveFileName = "application.tar"
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}