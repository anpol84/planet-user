openapi: 3.0.3
info:
  title: Planet User - OpenAPI 3.0
  version: 1.0.0
  description: |-
    This service is user service of hotel microservices
tags:
  - name: user
    description: Manipulate users
  - name: auth
    description: Get jwt token
  - name: hotel
    description: Manipulate a hotel
  - name: feedback
    description: Manipulate a feedback
  - name: gpt
    description: Ask gpt

paths:
  /api/hotels:
    post:
      tags:
        - hotel
      summary: Create a hotel
      operationId: createHotel
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHotelRequest'
      responses:
        '200':
          description: Hotel created
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - hotel
      summary: Get hotels
      operationId: getHotels
      parameters:
        - name: token
          in: header
          required: false
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: Hotel Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHotelsResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/hotels/filter:
    get:
      tags:
        - hotel
      summary: Get filtered hotels
      operationId: getFilteredHotels
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: city
          in: query
          required: true
          description: Location to filter hotels
          schema:
            type: string
        - name: minPrice
          in: query
          required: true
          description: min Price for hotel
          schema:
            type: number
            format: double
      responses:
        '200':
          description: FilteredHotels
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFilteredHotelsResponse'
        '202':
          description: Hotels not found
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/hotels/{hotelId}:
    get:
      tags:
        - hotel
      summary: Get a hotel
      operationId: getHotel
      parameters:
        - name: hotelId
          in: path
          required: true
          description: hotel id
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          required: false
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: Hotel Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHotelResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - hotel
      summary: Change hotel info
      operationId: updateHotel
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: hotelId
          in: path
          required: true
          description: hotel id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateHotelRequest'
      responses:
        '200':
          description: Hotel updated
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - hotel
      summary: Delete a hotel
      operationId: deleteHotel
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: hotelId
          in: path
          required: true
          description: hotel id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Hotel Deleted
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/hotels/favourite/{userId}:
    post:
      tags:
        - hotel
      summary: Create a link between user and favourite hotel
      operationId: addFavouriteHotel
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: User id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteHotelRequest'
      responses:
        '200':
          description: Link created
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - hotel
      summary: Delete a link between user and favourite hotel
      operationId: deleteFavouriteHotel
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: User id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteHotelRequest'
      responses:
        '200':
          description: Link deleted
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - hotel
      summary: Get a favourite user's hotels
      operationId: getFavouriteHotels
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: userId
          in: path
          required: true
          description: User id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Hotel Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFavouriteHotelsResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth:
    post:
      tags:
        - auth
      summary: Get a jwt token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/validate:
    post:
      tags:
        - auth
      summary: validate a jwt token
      operationId: checkToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
      responses:
        '200':
          description: Validate answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
  /api/validate/admin:
    post:
      tags:
        - auth
      summary: validate a jwt token
      operationId: checkAdminToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
      responses:
        '200':
          description: Validate answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
  /api/users:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'token не передан'
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/{userId}:
    get:
      tags:
        - user
      summary: get a user info
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - user
      summary: change user info
      operationId: ChangeUser
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserRequest'
      responses:
        '200':
          description: User changed
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - user
      summary: delete a user
      operationId: DeleteUser
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/feedback:
    post:
      tags:
        - feedback
      summary: Create a new feedback
      operationId: createFeedback
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackRequest'
      responses:
        '200':
          description: Feedback created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - feedback
      summary: Get a hotel feedbacks
      operationId: getHotelFeedbacks
      parameters:
        - name: hotelId
          in: query
          required: true
          description: Hotel id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Hotel feedbacks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHotelFeedbacksResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/feedback/{feedbackId}:
    put:
      tags:
        - feedback
      summary: Update a feedback
      operationId: updateFeedback
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          description: Feedback id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeedbackRequest'
      responses:
        '200':
          description: Feedback update
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - feedback
      summary: Delete a feedback
      operationId: deleteFeedback
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          description: Feedback id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Feedback deleted
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - feedback
      summary: Get a feedback
      operationId: getFeedback
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
        - name: feedbackId
          in: path
          required: true
          description: Feedback id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Hotel feedbacks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeedbackResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/gpt:
    post:
      tags:
        - gpt
      summary: Ask a question
      operationId: askGpt
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskGptRequest'
      responses:
        '200':
          description: Hotel feedbacks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskGptResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    AuthRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    ValidateRequest:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    ValidateResponse:
      type: object
      properties:
        isValid:
          type: boolean
    CreateUserRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    CreateUserResponse:
      type: object
      properties:
        token:
          type: string
    GetUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
    ChangeUserRequest:
      type: object
      properties:
        login:
          type: string
      required:
        - token
    FavouriteHotelRequest:
      type: object
      required:
        - hotelId
      properties:
        hotelId:
          type: integer
          format: int64
    GetUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/GetUserResponse'
    CreateHotelRequest:
      type: object
      required:
        - name
        - city
        - stars
        - positions
        - additions
        - roomPeople
        - roomViews
        - roomTypes
        - imageUrl
      properties:
        name:
          type: string
        city:
          type: string
        stars:
          type: integer
        imageUrl:
          type: string
        positions:
          type: array
          items:
            type: string
            enum:
              - CENTER
              - PARK
              - SEA
              - AIRPORT
              - RAILWAY
        additions:
          type: array
          items:
            type: string
            enum:
              - WIFI
              - PARKING
              - RESTAURANT
              - BEACH
              - POOL
              - AQUA_PARK
              - SAUNA
              - FITNESS
        roomPeople:
          type: array
          items:
            $ref: '#/components/schemas/RoomPeople'
        roomViews:
          type: array
          items:
            $ref: '#/components/schemas/RoomView'
        roomTypes:
          type: array
          items:
            $ref: '#/components/schemas/RoomType'
    RoomPeople:
      type: object
      required:
        - type
        - price
      properties:
        type:
          type: string
          enum:
            - SINGLE
            - DOUBLE
            - TWIN
            - DBL_EXB
            - TRIPLE
        price:
          type: number
          format: double
    RoomView:
      type: object
      required:
        - type
        - price
      properties:
        type:
          type: string
          enum:
            - SEA_VIEW
            - CITY_VIEW
            - GARDEN_VIEW
            - POOL_VIEW
        price:
          type: number
          format: double
    RoomType:
      type: object
      required:
        - type
        - price
      properties:
        type:
          type: string
          enum:
            - STANDARD
            - SUPERIOR
            - STUDIO
            - FAMILY_ROOM
            - FAMILY_STUDIO
            - DELUX
            - SUITE
            - PRESIDENTIAL_SUITE
            - HONEYMOON_SUITE
        price:
          type: number
          format: double
    GetHotelResponse:
      type: object
      required:
        - id
        - name
        - city
        - stars
        - avgRate
        - minPrice
        - maxPrice
        - imageUrl
        - positions
        - additions
        - roomPeople
        - roomViews
        - roomTypes
        - isFavourite
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        city:
          type: string
        stars:
          type: integer
        avgRate:
          type: number
          format: double
        minPrice:
          type: number
          format: double
        maxPrice:
          type: number
          format: double
        imageUrl:
          type: string
        isFavourite:
          type: boolean
        positions:
          type: array
          items:
            type: string
            enum:
              - CENTER
              - PARK
              - SEA
              - AIRPORT
              - RAILWAY
        additions:
          type: array
          items:
            type: string
            enum:
              - WIFI
              - PARKING
              - RESTAURANT
              - BEACH
              - POOL
              - AQUA_PARK
              - SAUNA
              - FITNESS
        roomPeople:
          type: array
          items:
            $ref: '#/components/schemas/RoomPeople'
        roomViews:
          type: array
          items:
            $ref: '#/components/schemas/RoomView'
        roomTypes:
          type: array
          items:
            $ref: '#/components/schemas/RoomType'
    GetHotelsResponse:
      type: object
      properties:
        hotels:
          type: array
          items:
            $ref: '#/components/schemas/HotelWithoutExtensions'
    HotelWithoutExtensions:
      type: object
      required:
        - id
        - name
        - city
        - stars
        - avgRate
        - minPrice
        - maxPrice
        - imageUrl
        - positions
        - additions
        - isFavourite
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        city:
          type: string
        stars:
          type: integer
        avgRate:
          type: number
          format: double
        minPrice:
          type: number
          format: double
        maxPrice:
          type: number
          format: double
        imageUrl:
          type: string
        positions:
          type: array
          items:
            type: string
            enum:
              - CENTER
              - PARK
              - SEA
              - AIRPORT
              - RAILWAY
        additions:
          type: array
          items:
            type: string
            enum:
              - WIFI
              - PARKING
              - RESTAURANT
              - BEACH
              - POOL
              - AQUA_PARK
              - SAUNA
              - FITNESS
        isFavourite:
          type: boolean
    GetFilteredHotelsResponse:
      type: object
      properties:
        isError:
          type: boolean
        hotels:
          type: array
          items:
            $ref: '#/components/schemas/GetHotelResponse'
    UpdateHotelRequest:
      type: object
      required:
        - name
        - city
        - stars
        - positions
        - additions
        - roomPeople
        - roomViews
        - roomTypes
        - imageUrl
      properties:
        name:
          type: string
        city:
          type: string
        stars:
          type: integer
        imageUrl:
          type: string
        positions:
          type: array
          items:
            type: string
            enum:
              - CENTER
              - PARK
              - SEA
              - AIRPORT
              - RAILWAY
        additions:
          type: array
          items:
            type: string
            enum:
              - WIFI
              - PARKING
              - RESTAURANT
              - BEACH
              - POOL
              - AQUA_PARK
              - SAUNA
              - FITNESS
        roomPeople:
          type: array
          items:
            $ref: '#/components/schemas/RoomPeople'
        roomViews:
          type: array
          items:
            $ref: '#/components/schemas/RoomView'
        roomTypes:
          type: array
          items:
            $ref: '#/components/schemas/RoomType'
    GetFavouriteHotelsResponse:
      type: object
      properties:
        hotels:
          type: array
          items:
            $ref: '#/components/schemas/HotelWithoutExtensions'
    CreateFeedbackRequest:
      type: object
      properties:
        hotelId:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        body:
          type: string
        mark:
          type: integer
    GetHotelFeedbacksResponse:
      type: object
      properties:
        hotels:
          type: array
          items:
            $ref: '#/components/schemas/Feedback'
    Feedback:
      type: object
      required:
        - mark
        - body
        - date
        - userLogin
        - id
      properties:
        id:
          type: integer
          format: int64
        mark:
          type: integer
        body:
          type: string
        createdAt:
          type: string
          format: date
        userLogin:
          type: string
    UpdateFeedbackRequest:
      type: object
      required:
        - mark
        - body
      properties:
        mark:
          type: integer
        body:
          type: string
    GetFeedbackResponse:
      type: object
      required:
        - mark
        - body
      properties:
        mark:
          type: integer
        body:
          type: string
    AskGptRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
    AskGptResponse:
      type: object
      properties:
        isError:
          type: boolean
        hotels:
          type: array
          items:
            $ref: '#/components/schemas/HotelWithoutExtensions'