openapi: 3.0.3
info:
  title: Planet User - OpenAPI 3.0
  version: 1.0.0
  description: |-
    This service is user service of hotel microservices
tags:
  - name: user
    description: Manipulate users
  - name: auth
    description: Get jwt token

paths:
  /api/auth:
    post:
      tags:
        - auth
      summary: Get a jwt token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Ошибка в бизнес логике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
  /api/validate:
    post:
      tags:
        - auth
      summary: validate a jwt token
      operationId: checkToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateRequest'
      responses:
        '200':
          description: Validate answer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateResponse'
        '400':
          description: Ошибка валидации запроса
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
  /api/users:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getUsers
      parameters:
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'token не передан'
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
    post:
      tags:
        - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'login' или 'password' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
  /api/users/{userId}:
    get:
      tags:
        - user
      summary: get a user info
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: User Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
    put:
      tags:
        - user
      summary: change user info
      operationId: ChangeUser
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserRequest'
      responses:
        '200':
          description: User changed
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'
    delete:
      tags:
        - user
      summary: delete a user
      operationId: DeleteUser
      parameters:
        - name: userId
          in: path
          required: true
          description: user id
          schema:
            type: integer
            format: int64
        - name: token
          in: header
          required: true
          description: Bearer token for authorization
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Поле 'token' не передано"
        '422':
          description: Business logic error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserErrorResponse'

components:
  schemas:
    AuthRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    AuthErrorResponse:
      type: object
      properties:
        message:
          type: string
    ValidateRequest:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    ValidateResponse:
      type: object
      properties:
        isValid:
          type: boolean
    CreateUserRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
        city:
          type: string
      required:
        - login
        - password
        - city
    CreateUserResponse:
      type: object
      properties:
        token:
          type: string
    UserErrorResponse:
      type: object
      properties:
        message:
          type: string
    GetUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        city:
          type: string
    ChangeUserRequest:
      type: object
      properties:
        login:
          type: string
        city:
          type: string
      required:
        - token
        - city
    GetUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/GetUserResponse'
